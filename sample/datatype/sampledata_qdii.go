// Code generated by "qdiimpl"; DO NOT EDIT.
package main

import (
	"fmt"
	idata "github.com/RangelReale/qdiimpl/sample/datatype/idata"
	"runtime"
)

type QDSampleDataContext struct {
	ExecCount  int
	CallerFunc string
	CallerFile string
	CallerLine int
	Data       *idata.IData
}

type QDSampleData struct {
	Data *idata.IData

	execCount map[string]int
	implGet   func(debugCtx *QDSampleDataContext, name string) (any, error)
}

var _ SampleData = (*QDSampleData)(nil)

type QDSampleDataOption func(*QDSampleData)

func NewQDSampleData(options ...QDSampleDataOption) *QDSampleData {
	ret := &QDSampleData{execCount: map[string]int{}}
	for _, opt := range options {
		opt(ret)
	}
	return ret
}

func (d *QDSampleData) Get(name string) (any, error) {
	return d.implGet(d.createContext("Get", d.implGet == nil), name)
}

func (d *QDSampleData) getCallerFuncName(skip int) (funcName string, file string, line int) {
	counter, file, line, success := runtime.Caller(skip)
	if !success {
		panic("runtime.Caller failed")
	}
	return runtime.FuncForPC(counter).Name(), file, line
}

func (d *QDSampleData) checkCallMethod(methodName string, implIsNil bool) (count int) {
	if implIsNil {
		panic(fmt.Errorf("[QDSampleData] method '%s' not implemented", methodName))
	}
	d.execCount[methodName]++
	return d.execCount[methodName]
}

func (d *QDSampleData) createContext(methodName string, implIsNil bool) *QDSampleDataContext {
	callerFunc, callerFile, callerLine := d.getCallerFuncName(3)
	return &QDSampleDataContext{ExecCount: d.checkCallMethod(methodName, implIsNil), CallerFunc: callerFunc, CallerFile: callerFile, CallerLine: callerLine, Data: d.Data}
}

// Options

func WithQDSampleDataData(data *idata.IData) QDSampleDataOption {
	return func(d *QDSampleData) {
		d.Data = data
	}
}

func WithQDSampleDataGet(implGet func(debugCtx *QDSampleDataContext, name string) (any, error)) QDSampleDataOption {
	return func(d *QDSampleData) {
		d.implGet = implGet
	}
}
